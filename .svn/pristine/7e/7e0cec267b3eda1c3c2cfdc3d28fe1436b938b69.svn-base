<?xml version="1.0" encoding="utf-8" ?>
<!--============================================================================
//	CAUTION: This file is generated by IBatisNetGen.3.SQLMap.cst at 5/24/2016 11:05:56 AM
//				Any manual editing will be lost in re-generation.
//===========================================================================-->
<sqlMap namespace="eHospital" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <statements>    
    <statement id="DAOLOG01_GetList" parameterClass="System.Collections.IDictionary" resultClass="DataObject">
      select *
      from TT_LOG
      <dynamic prepend="where">
        <isParameterPresent>
          <isNotEmpty prepend="and" property="LOG_ID">
            LOG_ID = '$LOG_ID$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="MODULE_NAME">
            MODULE_NAME = '$MODULE_NAME$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="ACTION">
            ACTION = '$ACTION$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="USER_ID">
            USER_ID = '$USER_ID$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="REF_TABLE">
            REF_TABLE = '$REF_TABLE$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="REF_ID">
            REF_ID = '$REF_ID$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="REF_NUMBER">
            REF_NUMBER = '$REF_NUMBER$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="HOSPITAL_ID">
            HOSPITAL_ID = '$HOSPITAL_ID$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="FROM_DATE">
            MODIFY_DATE &gt;= '$FROM_DATE$'
        </isNotEmpty>
          <isNotEmpty prepend="and" property="TO_DATE">
            MODIFY_DATE &lt;= '$TO_DATE$'
        </isNotEmpty>
        </isParameterPresent>
      </dynamic>
      order by MODIFY_DATE
    </statement>  
    <statement id="DAOLOG01_SearchDataLog" parameterClass="System.Collections.IDictionary" resultClass="DataObject">
      WITH LIST_LOG AS
      (
      select *, COUNT(*) OVER() AS TOTAL_ROW
      , ROW_NUMBER() OVER(ORDER BY MODIFY_DATE ASC) as ROWNUMBER
      from TT_LOG
      <dynamic prepend="where">
        <isParameterPresent>
          <isNotEmpty prepend="and" property="MODULE_NAME">
            MODULE_NAME = '$MODULE_NAME$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="ACTION">
            ACTION = '$ACTION$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="USER_ID">
            USER_ID = '$USER_ID$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="REF_TABLE">
            REF_TABLE = '$REF_TABLE$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="REF_ID">
            REF_ID = '$REF_ID$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="REF_NUMBER">
            REF_NUMBER = '$REF_NUMBER$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="HOSPITAL_ID">
            HOSPITAL_ID = '$HOSPITAL_ID$'
          </isNotEmpty>
          <isNotEmpty prepend="and" property="FROM_DATE">
            MODIFY_DATE &gt;= '$FROM_DATE$'
        </isNotEmpty>
          <isNotEmpty prepend="and" property="TO_DATE">
            MODIFY_DATE &lt;= '$TO_DATE$'
        </isNotEmpty>
        </isParameterPresent>
      </dynamic>
      )
      SELECT *
      FROM LIST_LOG
      WHERE ROWNUMBER BETWEEN '$FROM_ROW$' AND '$TO_ROW$'
      order by MODIFY_DATE
    </statement>
    <statement id="DAOLOG01_GetLogSetting" parameterClass="System.Collections.IDictionary" resultClass="DataObject">
      select *
      from TM_LOG_SETTINGS
      where HOSPITAL_ID = '$BENHVIEN_ID$' AND ACTIVE = '1'
    </statement>
    
    <statement id="DAOLOG01_GetDetail" parameterClass="System.String" resultClass="DataObject">
      select *
      from TT_LOG
      where LOG_ID  = '$value$'
    </statement>
    
    <statement id="DAOLOG01_Add" parameterClass="System.Collections.IDictionary" resultClass="System.Int64">
      declare @REF_TABLE varchar(100);
      declare @MODULE varchar(100);
      declare @DESCRIPTION nvarchar(500);
      set @REF_TABLE = (SELECT REF_TABLE FROM TM_LOG_SETTINGS WHERE ACTIVE='1' AND DATA_NAME='$DATA_NAME$' AND HOSPITAL_ID='$HOSPITAL_ID$');
      set @MODULE = (SELECT MODULE_NAME FROM TM_LOG_SETTINGS WHERE ACTIVE='1' AND DATA_NAME='$DATA_NAME$' AND HOSPITAL_ID='$HOSPITAL_ID$');
      set @DESCRIPTION = (SELECT CASE '$ACTION$' WHEN 'Insert' THEN INSERT_DESCRIPTION
                                                WHEN 'Update' THEN UPDATE_DESCRIPTION
                                                WHEN 'Delete' THEN DELETE_DESCRIPTION
                                                WHEN 'Cancel' THEN CANCEL_DESCRIPTION ELSE '' END
      FROM TM_LOG_SETTINGS WHERE ACTIVE='1' AND DATA_NAME='$DATA_NAME$' AND HOSPITAL_ID='$HOSPITAL_ID$');
      IF(@REF_TABLE IS NOT NULL OR @REF_TABLE  &lt;&gt; '')      
        INSERT into TT_LOG (
        ACTION
        , MODULE_NAME
        , REF_TABLE
        , REF_ID
        , REF_NUMBER
        , DESCRIPTION
        , USER_ID
        , MODIFY_DATE
        , HOSPITAL_ID
        ) values (
        #ACTION#
        , @MODULE
        , @REF_TABLE
        , #REF_ID#
        , #REF_NUMBER#
        , @DESCRIPTION
        , #USER_ID#
        , #MODIFY_DATE#
        , #HOSPITAL_ID#
        );
    </statement>

    <statement id="DAOLOG01_LockBegin" parameterClass="System.Collections.IDictionary" resultClass="System.Int64">
      INSERT into TT_LOG_UPDATE ( REF_TABLE , REF_ID , BENHVIEN_ID ) 
      values (#REF_TABLE#, #REF_ID#, #BENHVIEN_ID#);
    </statement>

    <statement id="DAOLOG01_LockEnd" parameterClass="System.Collections.IDictionary" resultClass="System.Int64">
      DELETE TT_LOG_UPDATE
      where REF_TABLE = '$REF_TABLE$' and REF_ID = '$REF_ID$' and BENHVIEN_ID = '$BENHVIEN_ID$'
    </statement>

    <statement id="DAOLOG01_TransferLog" parameterClass="System.Collections.IDictionary" resultClass="System.Int64">
      INSERT into TT_SYS_NETLOG (
      HOSPITAL_ID
      , ACCOUNTNAME
      , MODULE
      , TRANSFERDIR
      , TRANSFERTIME
      , TRANSFERSIZE
      , CALLS
      , LOGTIME
      ) values (
      #HOSPITAL_ID#
      , #ACCOUNTNAME#
      , #MODULE#
      , #TRANSFERDIR#
      , #TRANSFERTIME#
      , #TRANSFERSIZE#
      , #CALLS#
      , #LOGTIME#
      );
    </statement>
    
  </statements>
</sqlMap>
